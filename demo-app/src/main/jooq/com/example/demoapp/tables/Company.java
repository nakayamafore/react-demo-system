/*
 * This file is generated by jOOQ.
 */
package com.example.demoapp.tables;


import com.example.demoapp.DefaultSchema;
import com.example.demoapp.Keys;
import com.example.demoapp.tables.records.CompanyRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Company extends TableImpl<CompanyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>company</code>
     */
    public static final Company COMPANY = new Company();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyRecord> getRecordType() {
        return CompanyRecord.class;
    }

    /**
     * The column <code>company.company_id</code>.
     */
    public final TableField<CompanyRecord, Long> COMPANY_ID = createField(DSL.name("company_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>company.company_code</code>.
     */
    public final TableField<CompanyRecord, String> COMPANY_CODE = createField(DSL.name("company_code"), SQLDataType.VARCHAR(24).nullable(false), this, "");

    /**
     * The column <code>company.biz_name</code>.
     */
    public final TableField<CompanyRecord, String> BIZ_NAME = createField(DSL.name("biz_name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>company.biz_place</code>.
     */
    public final TableField<CompanyRecord, String> BIZ_PLACE = createField(DSL.name("biz_place"), SQLDataType.VARCHAR(50), this, "");

    private Company(Name alias, Table<CompanyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Company(Name alias, Table<CompanyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>company</code> table reference
     */
    public Company(String alias) {
        this(DSL.name(alias), COMPANY);
    }

    /**
     * Create an aliased <code>company</code> table reference
     */
    public Company(Name alias) {
        this(alias, COMPANY);
    }

    /**
     * Create a <code>company</code> table reference
     */
    public Company() {
        this(DSL.name("company"), null);
    }

    public <O extends Record> Company(Table<O> child, ForeignKey<O, CompanyRecord> key) {
        super(child, key, COMPANY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<CompanyRecord, Long> getIdentity() {
        return (Identity<CompanyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CompanyRecord> getPrimaryKey() {
        return Keys.KEY_COMPANY_PRIMARY;
    }

    @Override
    public List<UniqueKey<CompanyRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_COMPANY_UK_I2JCJCEJGNWUAFXOFWMGOSD13);
    }

    @Override
    public Company as(String alias) {
        return new Company(DSL.name(alias), this);
    }

    @Override
    public Company as(Name alias) {
        return new Company(alias, this);
    }

    @Override
    public Company as(Table<?> alias) {
        return new Company(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Company rename(String name) {
        return new Company(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Company rename(Name name) {
        return new Company(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Company rename(Table<?> name) {
        return new Company(name.getQualifiedName(), null);
    }
}
